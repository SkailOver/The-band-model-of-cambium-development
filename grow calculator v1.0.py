# -*- coding: utf-8 -*-
"""С формулами для коэффициентов.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uui1RPLKW6pf_gw6SV0M6YRmORRvBHxa
"""

import numpy as np
import pandas as pd
import math
import statistics
from scipy import interpolate
from sklearn import preprocessing
from sklearn.preprocessing import Normalizer
from sklearn.preprocessing import normalize
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LinearRegression
pd.set_option('display.max_rows', None)



data = pd.read_csv('Season_info.csv', sep = ';')
rate = pd.read_csv('Grow_rates.csv', sep = ';')
cwt = pd.read_csv('D_and_Trend.csv', sep=';')
cwt = cwt.set_index('year')

print ('Wait for the program to process the incoming files, it may take some time.')

print ('Hello, welcome to tree grow calculator v1.0')

new_data = data[['year', 'SOS', 'EOS']]
new_data.set_index('year', inplace = True)
df = pd.DataFrame(columns=['year', 't', 'Gr'])

i = 0
for index, row in rate.iterrows():
     if((row['t'] > new_data.loc[row['year']][0]) and (row['t'] < new_data.loc[row['year']][1])):
         df.loc[i] = row[['year', 't', 'Gr']]
         i+=1

print('Enter the year of the beginning of calculations and the year of the end of calculations SEPARATED by a SPACE:')

first_year, second_year = map(int, input().split())

def error(beta, year):
        df['S_i'] = (df['Gr']-alpha)/beta
        S_i_sum = []
        for i in range(first_year, second_year+1):
            S_i_sum.append(df[df['year'] == i]['S_i'].sum())
        S_i_sum = pd.Series(S_i_sum, index = range(first_year, second_year+1))
        return abs(S_i_sum - deltaS)[year]

def Golden(year, epsilon = 0.000001):
    a, b = 0.00001, 1
    Phi = (1+math.sqrt(5))/2
    while(abs(b-a) > epsilon):
        x1 = b - (b-a)/Phi
        x2 = a + (b-a)/Phi
        if(error(x1, year) >= error(x2, year)):
            a = x1
        else: b = x2
    return (a+b)/2

alpha = 0.05
beta = 0.00124641

deltaS = cwt['d']*10 #для нормальной программы
#deltaS = cwt['d']
deltaS = pd.Series(deltaS, index = range(first_year, second_year+1))
df.loc[df['Gr'] < alpha, 'Gr'] = alpha
df['S_i'] = (df['Gr']-alpha)/beta

S_i_sum = []
for i in range(first_year, second_year+1):
    S_i_sum.append(df[df['year'] == i]['S_i'].sum())

S_i_sum = pd.Series(S_i_sum, index = range(first_year, second_year+1))

answer_beta = []
for i in range(first_year, second_year+1):
    answer_beta.append(Golden(i))

answer_beta = pd.Series(answer_beta, index = range(first_year, second_year+1))


#for i in range(first_year, second_year+1):
    #print(error(answer_beta[i], i))


new = [error(answer_beta[x], x) for x in range(first_year,second_year+1)]

y = np.array(answer_beta)

Vext = []
for i in range(first_year, second_year+1):
    Vext.append(df[df['year'] == i]['Gr'].sum())

#Vext = [float(i)/max(Vext) for i in Vext]
norm = (sum(Vext) / len(Vext))
Vext = Vext/norm

Trend = cwt.trend
Trend = pd.Series(Trend, index = range(first_year, second_year+1))
Trend = np.array(Trend)

rx1y = np.corrcoef(Vext,y)
rx2y = np.corrcoef(Trend,y)
rx1x2 = np.corrcoef(Vext,Trend)
#rx1y [0,1]
#rx2y [0,1]
#rx1x2 [0,1]

beta2 = (rx2y [0,1] - rx1y [0,1]*rx1x2 [0,1])/(1 - rx1x2 [0,1]*rx1x2 [0,1])
beta1 = rx1y [0,1] - rx1x2 [0,1]*beta2

b1 = beta1 * np.std(y)/np.std(Vext)
b2 = beta2 * np.std(y)/np.std(Trend)

b2

b0 = statistics.mean(y)-statistics.mean(Vext)*b1 - statistics.mean(Trend)*b2
b0

answer_beta2 = []
for i in range(0, second_year-first_year+1):
    answer_beta2.append(b1*Vext[i]+b2*Trend[i]+b0)
#for current_year in range(first_year, second_year+1):

      # df['S_i'] = (df['Gr'] - alpha) / answer_beta[current_year]
       # new_df = df[df['year'] == current_year][['S_i', 't']].set_index('t')
       # new_df = new_df.cumsum()

with pd.ExcelWriter('Output_file.xlsx') as writer:
    #for current_year in range(first_year, second_year+1):
        new1_spline = pd.DataFrame(columns=['Beta_fit', 'Beta', 'b0','b1','b2'])
        new1_spline.Beta_fit = answer_beta 
        new1_spline.Beta = answer_beta2 
        new1_spline.b0 = b0
        new1_spline.b1 = b1 
        new1_spline.b2 = b2
        #new1_spline.DD = cwt['DD']
       #$ new1_spline.to_csv(f'{current_year}_csv.csv', sep = ',')
        new1_spline.to_excel(writer, sheet_name = ('Result'))